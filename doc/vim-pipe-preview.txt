*vim-pipe-preview.txt* Piped command output preview in a new split
*vim-pipe-preview*

Author:  Stephen Kent <https://github.com/smkent/vim-pipe-preview>
License: GPLv3 (See LICENSE and COPYING in the plugin repository)


==============================================================================
INTRODUCTION                                *vim-pipe-preview-introduction*

vim-pipe-preview provides a way to pipe a buffer through an external command
and display the output in a separate split, which scrolls together with the
source buffer.

A command must be specified before this plugin can be used. See
|vim-pipe-preview-configuration|.

When activated (see |vim-pipe-preview-commands|), a new split is opened next
to the current buffer. The current buffer contents are piped through the
configured external command, and the output is displayed in the new window
split. The buffer and its preview have 'scrollbind' set in order to scroll
together.

The preview window is updated automatically each time the corresponding parent
buffer is saved, until the preview window is closed. The preview window can
also be updated on demand (see |:PipePreviewUpdate|).

If AnsiEsc (https://github.com/vim-scripts/AnsiEsc.vim) is installed, ANSI
color escape codes will be evaluated in the preview window automatically.


==============================================================================
CONFIGURATION                               *vim-pipe-preview-configuration*

                                            *g:pipe_preview_command*
                                            *b:pipe_preview_command*
External command to pass buffer contents to. The specified command must accept
buffer contents on standard input.

For example, to filter buffer contents through grep with a search term: >
    let g:pipe_preview_command = 'grep -e "search-term"'
<
|b:pipe_preview_command| overrides |g:pipe_preview_command|, if defined. See
|internal-variables| for variable scope information.

                                            *g:pipe_preview_<filetype>_command*
Similar to |g:pipe_preview_command|, but specific to <filetype>. For example,
to use terminal_markdown_viewer
(https://github.com/axiros/terminal_markdown_viewer) to preview Markdown
files: >
    let g:pipe_preview_markdown_command = 'mdv -'
<
                                            *g:pipe_preview_update_on_save*
If set, update preview windows when the corresponding parent buffer is saved.
(Default: enabled)


==============================================================================
COMMANDS                                    *vim-pipe-preview-commands*

                                            *:PipePreview*
Start preview for the current buffer in a vertical split (windows arranged
horizontally).

                                            *:PipePreviewHorizontal*
Start preview for the current buffer in a horizontal split (windows arranged
vertically).

                                            *:PipePreviewUpdate*
Update the preview for the current buffer.


 vim:tw=78:et:ft=help:norl:
